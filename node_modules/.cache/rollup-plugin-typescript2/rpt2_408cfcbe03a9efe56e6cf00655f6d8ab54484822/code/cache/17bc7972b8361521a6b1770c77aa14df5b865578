{"code":"export function isObject(value) {\r\n    return typeof value === 'object' && value !== null;\r\n}\r\nexport function isFunction(value) {\r\n    return typeof value === 'function';\r\n}\r\nexport function isString(value) {\r\n    return typeof value === 'string';\r\n}\r\nconst hasOwnProperty = Object.prototype.hasOwnProperty;\r\nexport const hasOwn = (value, key) => hasOwnProperty.call(value, key);\r\n/*\r\nlet r = ShapeFlags.ELEMENT | ShapeFlags.FUNCTIONAL_COMPONENT; // r包含元素和函数式组件\r\n// 我们像看r 是不是元素\r\n(r & ShapeFlags.ELEMENT) > 0; // 说明包含元素\r\n(r & ShapeFlags.FUNCTIONAL_COMPONENT) > 0\r\n*/\r\n// 二进制  00000100  位移  | & 是做权限必备的一个操作 \r\n// | 来组合权限 & 来判断是否包含某个权限\r\n//   001 |  010 => 011  =3    011 & 001 = 001   011 & 010 => 010   011 & 100  -> 000\r\n// 001\r\n// 010\r\n// 100\r\n//# sourceMappingURL=index.js.map","references":[],"map":"{\"version\":3,\"file\":\"index.js\",\"sourceRoot\":\"\",\"sources\":[\"../../../../../../packages/shared/src/index.ts\"],\"names\":[],\"mappings\":\"AAAA,MAAM,UAAU,QAAQ,CAAC,KAAc;IACrC,OAAO,OAAO,KAAK,KAAK,QAAQ,IAAI,KAAK,KAAK,IAAI,CAAA;AACpD,CAAC;AAED,MAAM,UAAU,UAAU,CAAC,KAAK;IAC9B,OAAO,OAAO,KAAK,KAAK,UAAU,CAAA;AACpC,CAAC;AACD,MAAM,UAAU,QAAQ,CAAC,KAAK;IAC5B,OAAO,OAAO,KAAK,KAAK,QAAQ,CAAA;AAClC,CAAC;AAaD,MAAM,cAAc,GAAG,MAAM,CAAC,SAAS,CAAC,cAAc,CAAA;AACtD,MAAM,CAAC,MAAM,MAAM,GAAG,CAAC,KAAK,EAAC,GAAG,EAAE,EAAE,CAAC,cAAc,CAAC,IAAI,CAAC,KAAK,EAAC,GAAG,CAAC,CAAC;AACpE;;;;;EAKE;AAGA,sCAAsC;AACtC,wBAAwB;AAC1B,oFAAoF;AAClF,MAAM;AACN,MAAM;AACN,MAAM\"}"}
